import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_service import generate_script_with_tools, generate_image_prompt, generate_title, format_script_for_telegram, verify_and_format_title
from services.recraft_service import generate_image
from handlers.video_handler import process_script, process_image, process_title

def shorten_topic(topic):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ–º—ã"""
    import hashlib
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –∏–∑ —Ç–µ–º—ã (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
    return hashlib.md5(topic.encode('utf-8')).hexdigest()[:8]

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database import get_user
    db_user = get_user(query.from_user.id)
    language = db_user[2] if db_user[2] else "—Ä—É—Å—Å–∫–∏–π"
    mode = db_user[3] if db_user[3] else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if query.data.startswith("mode_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        from handlers.settings_handler import mode_selection_handler
        await mode_selection_handler(update, context)
    
    elif query.data.startswith("approve_script_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª —Å—Ü–µ–Ω–∞—Ä–∏–π
        short_topic = query.data.split("_", 2)[2]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        short_to_full = context.user_data.get("short_to_full", {})
        topic = short_to_full.get(short_topic, short_topic)  # Fallback –Ω–∞ short_topic –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö
        video_data = context.user_data.get("video_data", {})
        approve_script = None
        if video_data and "script" in video_data:
            approve_script = video_data["script"]
        else:
            # Fallback –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            approve_script = generate_script_with_tools(topic, language)

        # –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {
                "topic": topic,
                "script": approve_script,
                "language": language,
                "mode": mode
            }
        else:
            context.user_data["video_data"]["topic"] = topic
            context.user_data["video_data"]["script"] = approve_script
            context.user_data["video_data"]["language"] = language
            context.user_data["video_data"]["mode"] = mode

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –õ–Æ–ë–´–ú —Å—Ü–µ–Ω–∞—Ä–∏–µ–º (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ process_script)
        await process_script(query, context, topic, approve_script, language, mode)
    
    elif query.data.startswith("regenerate_script_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π
        short_topic = query.data.split("_", 2)[2]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        short_to_full = context.user_data.get("short_to_full", {})
        topic = short_to_full.get(short_topic, short_topic)  # Fallback –Ω–∞ short_topic –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ

        # –ì–ï–ù–ï–†–ò–†–£–ï–ú –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        script = generate_script_with_tools(topic, language)

        ## –ö–†–ò–¢–ò–ß–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –í –ö–û–ù–¢–ï–ö–°–¢ –°–†–ê–ó–£!
        # –¢–µ–ø–µ—Ä—å approve_script_ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {}
        context.user_data["video_data"]["script"] = script
        context.user_data["video_data"]["topic"] = topic
        context.user_data["video_data"]["language"] = language
        context.user_data["video_data"]["mode"] = "–†—É—á–Ω–æ–π"



        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π short_topic –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ
        if topic not in [v for v in short_to_full.values()]:
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_script_" + short_topic)],
            [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_script_" + short_topic)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.delete_message()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        formatted_script = format_script_for_telegram(script)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await query.message.reply_text(
            f"‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...\n\n{formatted_script}\n\n(–û–±–Ω–æ–≤–ª–µ–Ω–æ)",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif query.data.startswith("approve_image_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        video_data = context.user_data.get("video_data", {})
        if video_data and "image_url" in video_data:
            topic = video_data["topic"]
            script = video_data["script"]
            approve_image_url = video_data["image_url"]
            title = video_data.get("title", topic)

            # –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            context.user_data["video_data"]["image_url"] = approve_image_url

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
            await process_image(query, context, topic, script, approve_image_url, title, language, mode)
    
    elif query.data.startswith("regenerate_image_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        short_topic = query.data.split("_", 2)[2]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        short_to_full = context.user_data.get("short_to_full", {})
        topic = short_to_full.get(short_topic, short_topic)  # Fallback –Ω–∞ short_topic –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        video_data = context.user_data.get("video_data", {})
        if video_data and "script" in video_data and "title" in video_data:
            script = video_data["script"]
            title = video_data["title"]
        else:
            # Fallback –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π (—Ö–æ—Ç—è —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            script = generate_script_with_tools(topic, language)
            title = generate_title(script, language)

        image_prompt = generate_image_prompt(script)
        image_url = await generate_image(image_prompt)

        ## –ö–†–ò–¢–ò–ß–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ö–û–ù–¢–ï–ö–°–¢!
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {}
        context.user_data["video_data"]["image_url"] = image_url
        context.user_data["video_data"]["topic"] = topic
        context.user_data["video_data"]["language"] = language
        context.user_data["video_data"]["mode"] = "–†—É—á–Ω–æ–π"

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π short_topic –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ
        if topic not in [v for v in short_to_full.values()]:
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_image_" + short_topic)],
            [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_image_" + short_topic)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await query.delete_message()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await query.message.reply_photo(
            photo=image_url,
            caption="–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ? (–û–±–Ω–æ–≤–ª–µ–Ω–æ)",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith("approve_title_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ
        video_data = context.user_data.get("video_data", {})
        if video_data and "title" in video_data:
            topic = video_data["topic"]
            script = video_data["script"]
            approve_title = video_data["title"]

            # –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            context.user_data["video_data"]["title"] = approve_title

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
            await process_title(query, context, topic, script, approve_title, language, mode)
    
    elif query.data.startswith("regenerate_title_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        short_topic = query.data.split("_", 2)[2]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        short_to_full = context.user_data.get("short_to_full", {})
        topic = short_to_full.get(short_topic, short_topic)  # Fallback –Ω–∞ short_topic –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        video_data = context.user_data.get("video_data", {})
        if video_data and "script" in video_data:
            script = video_data["script"]
        else:
            # Fallback –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π (—Ö–æ—Ç—è —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            script = generate_script_with_tools(topic, language)

        title = generate_title(script, language)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_verified = verify_and_format_title(title, language)
        if title_verified.startswith("‚ùå –û—à–∏–±–∫–∞"):
            title_verified = title

        ## –ö–†–ò–¢–ò–ß–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–û–ï –ù–ê–ó–í–ê–ù–ò–ï –í –ö–û–ù–¢–ï–ö–°–¢!
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {}
        context.user_data["video_data"]["title"] = title_verified
        context.user_data["video_data"]["topic"] = topic
        context.user_data["video_data"]["language"] = language
        context.user_data["video_data"]["mode"] = "–†—É—á–Ω–æ–π"

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π short_topic –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ
        if topic not in [v for v in short_to_full.values()]:
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_title_" + short_topic)],
            [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_title_" + short_topic)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.delete_message()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await query.message.reply_text(
            f"‚úçÔ∏è –ü–∏—à—É –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ...\n\n{title_verified}\n\n(–û–±–Ω–æ–≤–ª–µ–Ω–æ)",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
