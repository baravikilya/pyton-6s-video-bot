import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_service import generate_script_with_tools, generate_image_prompt, generate_title, clean_script_for_render, format_script_for_telegram
from services.recraft_service import generate_image
from services.json2video_service import submit_video_job, get_video_url
from database import get_user
import asyncio

def get_message_object(update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ update, query –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π update —Å message
    if hasattr(update, 'message') and update.message:
        return update.message
    # –ï—Å–ª–∏ —ç—Ç–æ callback query
    elif hasattr(update, 'callback_query') and update.callback_query:
        return update.callback_query.message
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ message –æ–±—ä–µ–∫—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    elif hasattr(update, 'reply_text'):
        return update
    else:
        return None

def shorten_topic(topic):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ–º—ã"""
    import hashlib
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –∏–∑ —Ç–µ–º—ã (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
    return hashlib.md5(topic.encode('utf-8')).hexdigest()[:8]

async def create_video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str, skip_initial_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""

    # –û–ß–ò–©–ê–ï–ú —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    if "video_data" in context.user_data:
        del context.user_data["video_data"]

    if "short_to_full" in context.user_data:
        del context.user_data["short_to_full"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    processing_key = f"processing_topic_{user_id}"

    if context.user_data.get(processing_key, False):
        # –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        message = get_message_object(update)
        if message and not skip_initial_message:
            await message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É! –Ø —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–º—É \"{topic}\". –î–∞–π –º–Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å!")
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data[processing_key] = True

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = get_user(user_id)
        language = db_user[2] if db_user[2] else "—Ä—É—Å—Å–∫–∏–π"
        mode = db_user[3] if db_user[3] else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        script = generate_script_with_tools(topic, language)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if script.startswith("‚ùå –û—à–∏–±–∫–∞"):
            message = get_message_object(update)
            if message:
                await message.reply_text(script)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if mode == "–†—É—á–Ω–æ–π":
            # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            message = get_message_object(update)
            if message and not skip_initial_message:
                await message.reply_text("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
            elif message and skip_initial_message:
                await message.reply_text("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")

            # –°–æ–∑–¥–∞–µ–º short_topic –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

            # –°–û–•–†–ê–ù–Ø–ï–ú —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            context.user_data["video_data"] = {
                "topic": topic,
                "script": script,
                "language": language,
                "mode": mode
            }

            # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_script_" + short_topic)],
                [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_script_" + short_topic)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
            formatted_script = format_script_for_telegram(script)
            message_text = "*–°—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ*\n\n" + formatted_script + "\n\n"
            message = get_message_object(update)
            if message:
                await message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            return

        # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        message = get_message_object(update)
        if message and not skip_initial_message:
            await message.reply_text("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
        elif message and skip_initial_message:
            await message.reply_text("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")

        await process_script(update, context, topic, script, language, mode)
    except Exception as e:
        message = get_message_object(update)
        if message:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
    finally:
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        context.user_data[processing_key] = False

async def process_script(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str, script: str, language: str, mode: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    message = get_message_object(update)
    if message:
        await message.reply_text("‚úçÔ∏è –ü–∏—à—É –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ...")
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    title = generate_title(script, language)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
    if title.startswith("‚ùå –û—à–∏–±–∫–∞"):
        if message:
            await message.reply_text(title)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if mode == "–†—É—á–Ω–æ–π":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π short_topic –∏–∑ context
        short_to_full = context.user_data.get("short_to_full", {})
        short_topic = None
        for key in short_to_full:
            if short_to_full[key] == topic:
                short_topic = key
                break
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if not short_topic:
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

        # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_title_" + short_topic)],
            [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_title_" + short_topic)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = "*–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ*\n\n" + title + "\n\n"
        if message:
            await message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        # –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π script –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if "script" not in context.user_data["video_data"]:
            context.user_data["video_data"]["script"] = script

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data["video_data"]["topic"] = topic
        context.user_data["video_data"]["title"] = title
        context.user_data["video_data"]["language"] = language
        context.user_data["video_data"]["mode"] = mode

        return

    # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        await process_title(update, context, topic, script, title, language, mode)
    except Exception as e:
        if message:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}")



async def process_title(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str, script: str, title: str, language: str, mode: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    message = get_message_object(update)
    if message:
        await message.reply_text("üé® –†–∏—Å—É—é –æ–±–ª–æ–∂–∫—É...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_prompt = generate_image_prompt(script)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ–º—Ç–µ
    if image_prompt.startswith("‚ùå –û—à–∏–±–∫–∞"):
        if message:
            await message.reply_text(image_prompt)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = await generate_image(image_prompt)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if mode == "–†—É—á–Ω–æ–π":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π short_topic –∏–∑ context
        short_to_full = context.user_data.get("short_to_full", {})
        short_topic = None
        for key in short_to_full:
            if short_to_full[key] == topic:
                short_topic = key
                break
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if not short_topic:
            short_topic = shorten_topic(topic)
            if "short_to_full" not in context.user_data:
                context.user_data["short_to_full"] = {}
            context.user_data["short_to_full"][short_topic] = topic

        # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="approve_image_" + short_topic)],
            [InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regenerate_image_" + short_topic)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if message:
            await message.reply_photo(
                photo=image_url,
                caption="–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ?",
                reply_markup=reply_markup
            )
        # –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if "video_data" not in context.user_data:
            context.user_data["video_data"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if "script" not in context.user_data["video_data"]:
            context.user_data["video_data"]["script"] = script
        if "title" not in context.user_data["video_data"]:
            context.user_data["video_data"]["title"] = title

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data["video_data"]["topic"] = topic
        context.user_data["video_data"]["image_url"] = image_url
        context.user_data["video_data"]["language"] = language
        context.user_data["video_data"]["mode"] = mode

        return

    # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        await process_image(update, context, topic, script, image_url, title, language, mode)
    except Exception as e:
        if message:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def process_image(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str, script: str, image_url: str, title: str, language: str, mode: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥"""

    # –ë–ï–†–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!
    video_data = context.user_data.get("video_data", {})

    if video_data:
        actual_script = video_data.get("script")
        actual_image_url = video_data.get("image_url")
        actual_title = video_data.get("title")
        actual_topic = video_data.get("topic")
    else:
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        actual_script = script
        actual_image_url = image_url
        actual_title = title
        actual_topic = topic

    message = get_message_object(update)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if message:
        await message.reply_text("üåê –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–Ω–¥–µ—Ä...")

    # –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (—É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ HTML-—Ç—ç–≥–∏)
    render_script = clean_script_for_render(actual_script)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    project_id = await submit_video_job(render_script, actual_image_url)

    if message:
        await message.reply_text("üåê –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã...")

    if not project_id or project_id.startswith("HTTP"):
        if message:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥" + (": " + project_id[:100] if project_id.startswith("HTTP") else "") + ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.reply_text(error_msg)
        return

    # –ü–æ–ª—É—á–∞–µ–º URL –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    video_url = await get_video_url(project_id)

    if not video_url:
        if message:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    caption_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n```\n{actual_title}\n```"
    if message:
        await message.reply_video(
            video=video_url,
            caption=caption_text,
            parse_mode="MarkdownV2"
        )
