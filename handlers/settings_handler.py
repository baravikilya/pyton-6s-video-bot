import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import update_user_settings

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
MODES = ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–†—É—á–Ω–æ–π"]

async def settings_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == "set_language":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–∑—ã–∫
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≤–∏–¥–µ–æ:",
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —è–∑—ã–∫–∞
        context.user_data["awaiting_input"] = "language"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —è–∑—ã–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data["language_request_message_id"] = query.message.message_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∏
        context.user_data["language_request_timestamp"] = time.time()
    
    elif query.data == "set_mode":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ–∂–∏–º–æ–≤
        keyboard = [
            [InlineKeyboardButton(mode, callback_data=f"mode_{mode}")]
            for mode in MODES
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=reply_markup
        )

async def mode_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑ callback_data
    selected_mode = query.data.split("_", 1)[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    update_user_settings(query.from_user.id, mode=selected_mode)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database import get_user
    db_user = get_user(query.from_user.id)
    language = db_user[2] if db_user[2] else "‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(f"–Ø–∑—ã–∫: {language}", callback_data="set_language")],
        [InlineKeyboardButton(f"–†–µ–∂–∏–º: {selected_mode}", callback_data="set_mode")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        """üé¨ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –ö–æ–Ω—Ç–µ–Ω—Ç–∞*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—Å""",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def language_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "üì± –ú–µ–Ω—é"
    if user_text == "üì± –ú–µ–Ω—é":
        from handlers.start_handler import start_handler
        await start_handler(update, context)
        return

    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    last_message_time = context.user_data.get("language_request_timestamp")
    if last_message_time and (asyncio.get_event_loop().time() - last_message_time) > 300:  # 5 –º–∏–Ω—É—Ç
        context.user_data["awaiting_input"] = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —è–∑—ã–∫–∞
    if context.user_data.get("awaiting_input") == "language":
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —è–∑—ã–∫
        language = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        update_user_settings(update.effective_user.id, language=language)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data["awaiting_input"] = None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database import get_user
        db_user = get_user(update.effective_user.id)
        mode = db_user[3] if db_user[3] else "‚Äî –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî"

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —è–∑—ã–∫–∞
        try:
            # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.delete()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —è–∑—ã–∫–∞ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –µ–≥–æ ID
            if "language_request_message_id" in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["language_request_message_id"]
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if "settings_message_id" in context.user_data:
                chat_id = update.effective_chat.id
                keyboard = [
                    [InlineKeyboardButton(f"–Ø–∑—ã–∫: {language}", callback_data="set_language")],
                    [InlineKeyboardButton(f"–†–µ–∂–∏–º: {mode}", callback_data="set_mode")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=context.user_data["settings_message_id"],
                    text="""üé¨ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –ö–æ–Ω—Ç–µ–Ω—Ç–∞*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—Å""",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                # Fallback - –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                keyboard = [
                    [InlineKeyboardButton(f"–Ø–∑—ã–∫: {language}", callback_data="set_language")],
                    [InlineKeyboardButton(f"–†–µ–∂–∏–º: {mode}", callback_data="set_mode")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    text="""üé¨ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –ö–æ–Ω—Ç–µ–Ω—Ç–∞*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—Å""",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )

        except Exception as e:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            keyboard = [
                [InlineKeyboardButton(f"–Ø–∑—ã–∫: {language}", callback_data="set_language")],
                [InlineKeyboardButton(f"–†–µ–∂–∏–º: {mode}", callback_data="set_mode")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                """üé¨ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å –ö–æ–Ω—Ç–µ–Ω—Ç–∞*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—Å""",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —è–∑—ã–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–º—É –¥–ª—è –≤–∏–¥–µ–æ
        await handle_topic_input(update, context)

async def handle_topic_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –¥–ª—è –≤–∏–¥–µ–æ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    topic = update.message.text

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    from handlers.video_handler import create_video_handler
    await create_video_handler(update, context, topic, skip_initial_message=True)
